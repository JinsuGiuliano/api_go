// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.5
// Revision: 2b856fec5e40ecea588c8fe3643ac6efdbc60b05
// Build Date: 2021-09-05T16:46:54Z
// Built By: goreleaser

package model

import (
	"fmt"
	"strings"
)

const (
	// HTTPErrorCodeUndefined is a HTTPErrorCode of type Undefined.
	HTTPErrorCodeUndefined HTTPErrorCode = iota
	// HTTPErrorCodeNotValidOrExpiredToken is a HTTPErrorCode of type NotValidOrExpiredToken.
	HTTPErrorCodeNotValidOrExpiredToken
	// HTTPErrorCodeInvalidIP is a HTTPErrorCode of type InvalidIP.
	HTTPErrorCodeInvalidIP
	// HTTPErrorCodeInvalidToken is a HTTPErrorCode of type InvalidToken.
	HTTPErrorCodeInvalidToken
	// HTTPErrorCodeInvalid2FACode is a HTTPErrorCode of type Invalid2FACode.
	HTTPErrorCodeInvalid2FACode
	// HTTPErrorCodeInvalidUserOrPass is a HTTPErrorCode of type InvalidUserOrPass.
	HTTPErrorCodeInvalidUserOrPass
	// HTTPErrorCodeUserBlocked is a HTTPErrorCode of type UserBlocked.
	HTTPErrorCodeUserBlocked
	// HTTPErrorCodeUserPassExpired is a HTTPErrorCode of type UserPassExpired.
	HTTPErrorCodeUserPassExpired
	// HTTPErrorCodeMissingToken is a HTTPErrorCode of type MissingToken.
	HTTPErrorCodeMissingToken
	// HTTPErrorCodeMissingPassword is a HTTPErrorCode of type MissingPassword.
	HTTPErrorCodeMissingPassword
	// HTTPErrorCodeErrorUpdatingPassword is a HTTPErrorCode of type ErrorUpdatingPassword.
	HTTPErrorCodeErrorUpdatingPassword
	// HTTPErrorCodeErrorSendingForgotEmail is a HTTPErrorCode of type ErrorSendingForgotEmail.
	HTTPErrorCodeErrorSendingForgotEmail
)

const _HTTPErrorCodeName = "UndefinedNotValidOrExpiredTokenInvalidIPInvalidTokenInvalid2FACodeInvalidUserOrPassUserBlockedUserPassExpiredMissingTokenMissingPasswordErrorUpdatingPasswordErrorSendingForgotEmail"

var _HTTPErrorCodeMap = map[HTTPErrorCode]string{
	0:  _HTTPErrorCodeName[0:9],
	1:  _HTTPErrorCodeName[9:31],
	2:  _HTTPErrorCodeName[31:40],
	3:  _HTTPErrorCodeName[40:52],
	4:  _HTTPErrorCodeName[52:66],
	5:  _HTTPErrorCodeName[66:83],
	6:  _HTTPErrorCodeName[83:94],
	7:  _HTTPErrorCodeName[94:109],
	8:  _HTTPErrorCodeName[109:121],
	9:  _HTTPErrorCodeName[121:136],
	10: _HTTPErrorCodeName[136:157],
	11: _HTTPErrorCodeName[157:180],
}

// String implements the Stringer interface.
func (x HTTPErrorCode) String() string {
	if str, ok := _HTTPErrorCodeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("HTTPErrorCode(%d)", x)
}

var _HTTPErrorCodeValue = map[string]HTTPErrorCode{
	_HTTPErrorCodeName[0:9]:                      0,
	strings.ToLower(_HTTPErrorCodeName[0:9]):     0,
	_HTTPErrorCodeName[9:31]:                     1,
	strings.ToLower(_HTTPErrorCodeName[9:31]):    1,
	_HTTPErrorCodeName[31:40]:                    2,
	strings.ToLower(_HTTPErrorCodeName[31:40]):   2,
	_HTTPErrorCodeName[40:52]:                    3,
	strings.ToLower(_HTTPErrorCodeName[40:52]):   3,
	_HTTPErrorCodeName[52:66]:                    4,
	strings.ToLower(_HTTPErrorCodeName[52:66]):   4,
	_HTTPErrorCodeName[66:83]:                    5,
	strings.ToLower(_HTTPErrorCodeName[66:83]):   5,
	_HTTPErrorCodeName[83:94]:                    6,
	strings.ToLower(_HTTPErrorCodeName[83:94]):   6,
	_HTTPErrorCodeName[94:109]:                   7,
	strings.ToLower(_HTTPErrorCodeName[94:109]):  7,
	_HTTPErrorCodeName[109:121]:                  8,
	strings.ToLower(_HTTPErrorCodeName[109:121]): 8,
	_HTTPErrorCodeName[121:136]:                  9,
	strings.ToLower(_HTTPErrorCodeName[121:136]): 9,
	_HTTPErrorCodeName[136:157]:                  10,
	strings.ToLower(_HTTPErrorCodeName[136:157]): 10,
	_HTTPErrorCodeName[157:180]:                  11,
	strings.ToLower(_HTTPErrorCodeName[157:180]): 11,
}

// ParseHTTPErrorCode attempts to convert a string to a HTTPErrorCode
func ParseHTTPErrorCode(name string) (HTTPErrorCode, error) {
	if x, ok := _HTTPErrorCodeValue[name]; ok {
		return x, nil
	}
	return HTTPErrorCode(0), fmt.Errorf("%s is not a valid HTTPErrorCode", name)
}

// MarshalText implements the text marshaller method
func (x HTTPErrorCode) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *HTTPErrorCode) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseHTTPErrorCode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// LoginStatusUndefined is a LoginStatus of type Undefined.
	LoginStatusUndefined LoginStatus = iota
	// LoginStatusSuccess is a LoginStatus of type Success.
	LoginStatusSuccess
	// LoginStatusFailEmail is a LoginStatus of type FailEmail.
	LoginStatusFailEmail
	// LoginStatusFailPassword is a LoginStatus of type FailPassword.
	LoginStatusFailPassword
	// LoginStatusFailInvalidCode is a LoginStatus of type FailInvalidCode.
	LoginStatusFailInvalidCode
	// LoginStatusFailCode is a LoginStatus of type FailCode.
	LoginStatusFailCode
)

const _LoginStatusName = "UndefinedSuccessFailEmailFailPasswordFailInvalidCodeFailCode"

var _LoginStatusMap = map[LoginStatus]string{
	0: _LoginStatusName[0:9],
	1: _LoginStatusName[9:16],
	2: _LoginStatusName[16:25],
	3: _LoginStatusName[25:37],
	4: _LoginStatusName[37:52],
	5: _LoginStatusName[52:60],
}

// String implements the Stringer interface.
func (x LoginStatus) String() string {
	if str, ok := _LoginStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("LoginStatus(%d)", x)
}

var _LoginStatusValue = map[string]LoginStatus{
	_LoginStatusName[0:9]:                    0,
	strings.ToLower(_LoginStatusName[0:9]):   0,
	_LoginStatusName[9:16]:                   1,
	strings.ToLower(_LoginStatusName[9:16]):  1,
	_LoginStatusName[16:25]:                  2,
	strings.ToLower(_LoginStatusName[16:25]): 2,
	_LoginStatusName[25:37]:                  3,
	strings.ToLower(_LoginStatusName[25:37]): 3,
	_LoginStatusName[37:52]:                  4,
	strings.ToLower(_LoginStatusName[37:52]): 4,
	_LoginStatusName[52:60]:                  5,
	strings.ToLower(_LoginStatusName[52:60]): 5,
}

// ParseLoginStatus attempts to convert a string to a LoginStatus
func ParseLoginStatus(name string) (LoginStatus, error) {
	if x, ok := _LoginStatusValue[name]; ok {
		return x, nil
	}
	return LoginStatus(0), fmt.Errorf("%s is not a valid LoginStatus", name)
}

// MarshalText implements the text marshaller method
func (x LoginStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *LoginStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseLoginStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
